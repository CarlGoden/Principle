    Redis Design Peinciple [Remote Dictionary Server]

Redis is an on-memory hashmap-based database server that can be expired and serialized.

0: Command

  0) Key: String

     onary: randomkey

     unary: del, dump, exists, persists, pttl, ttl, keys, type

     binary: expire, pexpire, move, rename, renamenx

  1) String: bytestring interger float [sds, cast rawptr to interger]

     set, get

     append, getrange, setrange

     incr, decr, incrby, decrby, incrbyfloat

     getbit, setbit, bitcount, bitop

  2) List: vector [quicklist]

     [l/r] push, pop, index, range, trim, rpoplpush

     block: blpop, brpop, brpoplpush

  3) Set:  unique collection [dict, intset]

     sadd, srem, sismember, scard

     spop, srandmember, smembers, smov

     sinter, sunion, sdiff, [store]

     --------------------------------------

     setTypeAdd(robj *subject, sds value)

         OBJ_ENCODING_HT: dictAddRaw(ht,value,NULL)

         OBJ_ENCODING_INTSET: intsetAdd(subject->ptr,llval,&success) | setTypeConvert(subject,OBJ_ENCODING_HT);

  4) Hash: structure [dict, ziplist]

     hset, hget, hmset, hmget, hdel, hlen

     hkeys, hvalues, hgetall, hexists

     hincrby, hincrbyfloat

     --------------------------------------

     hashTypeSet(robj *o, sds field, sds value, int flags)

            OBJ_ENCODING_HT: dictAdd(o->ptr,f,v)

            OBJ_ENCODING_ZIPLIST: ziplistFind(zl, fptr, (unsigned char*)field, sdslen(field), 1)


  5) Zset: ordered set, [(skiplist, dict), ziplist]

     zadd, zrem, zcard, zcount, zrank, zscore, zrange, zrangebyscore

     typedef struct zset {
         dict *dict;
         zskiplist *zsl;
     } zset;

     --------------------------------------

     OBJ_ENCODING_ZIPLIST:

     OBJ_ENCODING_SKIPLIST:


1: Data Structures

  0) object

     type:
              #define OBJ_STRING 0    /* String object. */
              #define OBJ_LIST 1      /* List object. */
              #define OBJ_SET 2       /* Set object. */
              #define OBJ_ZSET 3      /* Sorted set object. */
              #define OBJ_HASH 4      /* Hash object. */
              #define OBJ_MODULE 5    /* Module object. */
              #define OBJ_STREAM 6    /* Stream object. */

     encoding:
              #define OBJ_ENCODING_RAW 0     /* Raw representation */
              #define OBJ_ENCODING_INT 1     /* Encoded as integer */
              #define OBJ_ENCODING_HT 2      /* Encoded as hash table */
              #define OBJ_ENCODING_ZIPMAP 3  /* Encoded as zipmap */
              #define OBJ_ENCODING_LINKEDLIST 4 /* No longer used: old list encoding. */
              #define OBJ_ENCODING_ZIPLIST 5 /* Encoded as ziplist */
              #define OBJ_ENCODING_INTSET 6  /* Encoded as intset */
              #define OBJ_ENCODING_SKIPLIST 7  /* Encoded as skiplist */
              #define OBJ_ENCODING_EMBSTR 8  /* Embedded sds string encoding */
              #define OBJ_ENCODING_QUICKLIST 9 /* Encoded as linked list of ziplists */
              #define OBJ_ENCODING_STREAM 10 /* Encoded as a radix tree of listpacks */

     lru:
              #define MAXMEMORY_FLAG_LRU (1<<0)
              #define MAXMEMORY_FLAG_LFU (1<<1)
              #define MAXMEMORY_FLAG_ALLKEYS (1<<2)

    refcount:

        makeObjectShared(robj *o): refcount = OBJ_SHARED_REFCOUNT


    createObject(type, ptr): encoding = OBJ_ENCODING_RAW

    createEmbeddedStringObject(const char *ptr, size_t len): encoding = OBJ_ENCODING_EMBSTR
                                                             sds lay behind the obj

    createStringObject(const char *ptr, size_t len): embed or raw

    createStringObjectFromLongDouble(long double value, int humanfriendly): double to string, then createStringObject

    createStringObjectFromLongLongWithOptions(long long value, int valueobj): 1) shared, 2) cast long to ptr, 3)createStringObject

    #define sdsEncodedObject(objptr) (objptr->encoding == OBJ_ENCODING_RAW || objptr->encoding == OBJ_ENCODING_EMBSTR)

    tryObjectEncoding(robj *o): try OBJ_ENCODING_RAW -> OBJ_ENCODING_EMBSTR, OBJ_ENCODING_EMBSTR -> OBJ_ENCODING_INT

    getDecodedObject(robj *o):  OBJ_ENCODING_INT -> OBJ_ENCODING_EMBSTR

  1) sds:

         length of length: 5, 8, 32, 64

  2) dict:

         dictht ht[2]: 2 hashtable for rehashing

         typedef struct dictht {
             dictEntry **table;
             unsigned long size;
             unsigned long sizemask;
             unsigned long used;
         } dictht;

         typedef struct dictEntry {
             void *key;
             union {
                 void *val;
                 uint64_t u64;
                 int64_t s64;
                 double d;
             } v;
             struct dictEntry *next;
         } dictEntry;

  3) adlist: a generic doubly linked list

  4) listpack: a lists of strings serialization format

      total-length(4B) element-count(2B) ...... EOF(0xff)

      ...+++...: prefix-data postfix

      unsigned char *lpInsert(unsigned char *lp, unsigned char *ele, uint32_t size, unsigned char *p, int where, unsigned char **newp);

      where: LP_BEFORE, LP_AFTER, LP_REPLACE aka current position

  5) intset: bisection method

        typedef struct intset {
            uint32_t encoding;    #define INTSET_ENC_INT16 (sizeof(int16_t))
            uint32_t length;      #define INTSET_ENC_INT32 (sizeof(int32_t))
            int8_t contents[];    #define INTSET_ENC_INT64 (sizeof(int64_t))
        } intset;                 #length: element of contents

  6) ziplist

        <zlbytes> <zltail> <zllen> <entry> <entry> ... <entry> <zlend>

        NOTE: all fields are stored in little endian, if not specified otherwise.

        <uint32_t zlbytes> is an unsigned integer to hold the number of bytes that
        the ziplist occupies, including the four bytes of the zlbytes field itself.
        This value needs to be stored to be able to resize the entire structure
        without the need to traverse it first.

        <uint32_t zltail> is the offset to the last entry in the list. This allows
        a pop operation on the far side of the list without the need for full
        traversal.

        <uint16_t zllen> is the number of entries. When there are more than
        2^16-2 entries, this value is set to 2^16-1 and we need to traverse the
        entire list to know how many items it holds.

        <uint8_t zlend> is a special entry representing the end of the ziplist.
        Is encoded as a single byte equal to 255. No other normal entry starts
        with a byte set to the value of 255.

        <entry>: <prevlen> <encoding> <entry-data>

                 <prevlen from 0 to 253> <encoding> <entry>

                 0xFE <4 bytes unsigned little endian prevlen> <encoding> <entry>

                 0xFF is reserved for zlen

        * |00pppppp| - 1 byte
        *      String value with length less than or equal to 63 bytes (6 bits).
        *      "pppppp" represents the unsigned 6 bit length.
        * |01pppppp|qqqqqqqq| - 2 bytes
        *      String value with length less than or equal to 16383 bytes (14 bits).
        *      IMPORTANT: The 14 bit number is stored in big endian.
        * |10000000|qqqqqqqq|rrrrrrrr|ssssssss|tttttttt| - 5 bytes
        *      String value with length greater than or equal to 16384 bytes.
        *      Only the 4 bytes following the first byte represents the length
        *      up to 2^32-1. The 6 lower bits of the first byte are not used and
        *      are set to zero.
        *      IMPORTANT: The 32 bit number is stored in big endian.
        * |11000000| - 3 bytes
        *      Integer encoded as int16_t (2 bytes).
        * |11010000| - 5 bytes
        *      Integer encoded as int32_t (4 bytes).
        * |11100000| - 9 bytes
        *      Integer encoded as int64_t (8 bytes).
        * |11110000| - 4 bytes
        *      Integer encoded as 24 bit signed (3 bytes).
        * |11111110| - 2 bytes
        *      Integer encoded as 8 bit signed (1 byte).
        * |1111xxxx| - (with xxxx between 0001 and 1101) immediate 4 bit integer.
        *      Unsigned integer from 0 to 12. The encoded value is actually from
        *      1 to 13 because 0000 and 1111 can not be used, so 1 should be
        *      subtracted from the encoded 4 bit value to obtain the right value.
        * |11111111| - End of ziplist special entry.

  7) skiplist

         typedef struct zskiplistNode {
             sds ele;
             double score;
             struct zskiplistNode *backward;
             struct zskiplistLevel {
                 struct zskiplistNode *forward;
                 unsigned long span;
             } level[];
         } zskiplistNode;

         typedef struct zskiplist {
             struct zskiplistNode *header, *tail;
             unsigned long length;
             int level;
         } zskiplist;


  8) rax

  9) stream: used by rdb

2: Algorithm

  LRU/LFU: least recently/frequently used

  endien: endianconv

  hash: crc16 crc64 sha1 sha256 siphash

  rand: my19937 rand

  sort: pqsort

  compress: lzf

6: replication

    rdb: redis data base

         save 60 1000

         stop-writes-on-bgsave-error no

         rdbcompression yes

         dbfilename dump.rdb

    aof: append only file

         appendonly no

         appendfsync everysec

         no-appendfsync-on-rewrite no

         auto-aof-rewrite-percentage 100

         auto-aof-rewrite-min-size 64mb

        dir ./

7: transact: multi, exec, dispatch, watch, unwatch

8: server

    redisCommandTable: register command handler.

    serverLog: log Writing.

    redisFork: background task, such as RDB, AOF.

9: client

    clusterManagerLog

10: utility

    ae: epoll evport kqueue select

    conn: connention

    lolwut: draw pixel, line, square.

    localtime: no lock localtime caused by signal or fork.

    monotonic: getMonotonicUs

    bio: background task queues by 3 kinds of threads{BIO_CLOSE_FILE, BIO_AOF_FSYNC, BIO_LAZY_FREE}

    rio: abstract support different io devices {buffer:sds, file:fp, connection:conn, fd:fd}

         functions: read, write, tell, flush, checksum

