                The design principles of Lua

1) prefixing variables implements namespace.

2) lctype.h lctype.c: customize ctype family functions if possible: isalpha, isdigita ...

3) lprefix.h: prefix all c files for preprocessor.

4) llimits.h:

     #define check_exp(c,e)        (lua_assert(c), (e))

5) lzio.c lzio.h: buffer IO

    struct Zio {            /* not yet used */
        size_t n;           /* bytes still unread */
        const char *p;      /* current position in buffer */
        lua_Reader reader;  /* reader function, reader(L, data, &n) to fill the buffer */
        void *data;         /* additional data, opaque */
        lua_State *L;       /* Lua state (for reader) */
    };

    typedef struct Mbuffer { /* used by lexer */
        char *buffer;
        size_t n;
        size_t buffsize;
    } Mbuffer;

6) 10 builtin libs: lbaselib.c  lcorolib.c  ldblib.c  liolib.c  lmathlib.c  loadlib.c  loslib.c  lstrlib.c  ltablib.c  lutf8lib.c

   linit.c init those libs by lauxlib.c, lauxlib.h lualib.h.

   lauxlib.c:

     l_alloc: strange function used by G->frealloc.


7) lua object model: lobject.c lobject.h

  Section 0: Types

    /* basic types in lua.h */
    #define LUA_TNONE        (-1)
    #define LUA_TNIL            0
    #define LUA_TBOOLEAN        1
    #define LUA_TLIGHTUSERDATA  2
    #define LUA_TNUMBER         3
    #define LUA_TSTRING         4
    #define LUA_TTABLE          5
    #define LUA_TFUNCTION       6
    #define LUA_TUSERDATA       7
    #define LUA_TTHREAD         8

    #define LUA_NUMTYPES        9  /* 4bit, maxmum 16 */

    /* Extra types for collectable non-values */
    #define LUA_TUPVAL   (LUA_NUMTYPES)    /* upvalues */
    #define LUA_TPROTO   (LUA_NUMTYPES+1)  /* function prototypes */
    #define LUA_TDEADKEY (LUA_NUMTYPES+2)  /* removed keys in tables */

    /* number of all possible types (including LUA_TNONE but excluding DEADKEY) */
    #define LUA_TOTALTYPES (LUA_TPROTO + 2)

 Section 1: TValue

    typedef union Value {
        struct GCObject *gc;    /* collectable objects, by pointer */
        void *p;         /* light userdata */
        lua_CFunction f; /* light C functions */
        lua_Integer i;   /* integer numbers */
        lua_Number n;    /* float numbers */
    } Value;

    /* postfix '_' means privite variable, only used by macros, tt means 'type tag' */
    #define TValuefields    Value value_; lu_byte tt_

    typedef struct TValue {
      TValuefields;
    } TValue;

    /*
    ** tags for Tagged Values have the following use of bits:
    ** bits 0-3: actual tag (a LUA_T* constant)
    ** bits 4-5: variant bits
    ** bit 6: whether value is collectable
    */

    #define val_(o)         ((o)->value_)
    #define valraw(o)       (&val_(o))
    #define rawtt(o)        ((o)->tt_)   /* raw type tag of a TValue */
    #define novariant(t)    ((t) & 0x0F) /* tag with no variants (bits 0-3) */
    #define withvariant(t)  ((t) & 0x3F) /* type tag of a TValue (bits 0-3 for tags + variant bits 4-5) */
    #define ttypetag(o)     withvariant(rawtt(o))
    #define ttype(o)        (novariant(rawtt(o))) /* type of a TValue */
    #define checktag(o,t)   (rawtt(o) == (t))
    #define checktype(o,t)  (ttype(o) == (t))

  Section 2: GCObject

    /* Common Header for all collectable objects (in macro form, to be included in other objects) */
    /* tt is the same as TValue's tt_, marked for gc */
    /* 4 algorithms in GC: mark-sweep, mark-compact, copying, reference counting */
    #define CommonHeader    struct GCObject *next; lu_byte tt; lu_byte marked

    /* Common type for all collectable objects, base class for collectable class */
    typedef struct GCObject {
        CommonHeader;
    } GCObject;

    #define BIT_ISCOLLECTABLE  (1 << 6) /* Bit mark for collectable types */
    #define iscollectable(o)   (rawtt(o) & BIT_ISCOLLECTABLE)
    #define ctb(t)             ((t) | BIT_ISCOLLECTABLE) /* mark a tag as collectable */
    #define gcvalue(o)         check_exp(iscollectable(o), val_(o).gc)
    #define gcvalueraw(v)      ((v).gc)
    #define setgcovalue(L,obj,x) \
      { TValue *io = (obj); GCObject *i_g=(x); \
        val_(io).gc = i_g; settt_(io, ctb(i_g->tt)); }

    /* collectable object has the same tag as the original value */
    #define righttt(obj)        (ttypetag(obj) == gcvalue(obj)->tt)


  Section 3: Number

      #define LUA_VNUMINT      makevariant(LUA_TNUMBER, 0)  /* integer numbers */
      #define LUA_VNUMFLT      makevariant(LUA_TNUMBER, 1)  /* float numbers */
      #define ttisnumber(o)    checktype((o), LUA_TNUMBER)
      #define ttisfloat(o)     checktag((o), LUA_VNUMFLT)
      #define ttisinteger(o)   checktag((o), LUA_VNUMINT)
      #define nvalue(o)        check_exp(ttisnumber(o), (ttisinteger(o) ? cast_num(ivalue(o)) : fltvalue(o)))
      #define fltvalue(o)      check_exp(ttisfloat(o), val_(o).n)
      #define ivalue(o)        check_exp(ttisinteger(o), val_(o).i)
      #define fltvalueraw(v)   ((v).n)
      #define ivalueraw(v)     ((v).i)
      #define setfltvalue(obj,x) { TValue *io=(obj); val_(io).n=(x); settt_(io, LUA_VNUMFLT); }
      #define chgfltvalue(obj,x) { TValue *io=(obj); lua_assert(ttisfloat(io)); val_(io).n=(x); }
      #define setivalue(obj,x)   { TValue *io=(obj); val_(io).i=(x); settt_(io, LUA_VNUMINT); }
      #define chgivalue(obj,x)   { TValue *io=(obj); lua_assert(ttisinteger(io)); val_(io).i=(x); }

  Section 4: String

      #define LUA_VSHRSTR       makevariant(LUA_TSTRING, 0)  /* short strings */
      #define LUA_VLNGSTR       makevariant(LUA_TSTRING, 1)  /* long strings */
      #define ttisstring(o)     checktype((o), LUA_TSTRING)
      #define ttisshrstring(o)  checktag((o), ctb(LUA_VSHRSTR))
      #define ttislngstring(o)  checktag((o), ctb(LUA_VLNGSTR))
      #define tsvalueraw(v)     (gco2ts((v).gc))
      #define tsvalue(o)        check_exp(ttisstring(o), gco2ts(val_(o).gc))

      #define setsvalue(L,obj,x) \
        { TValue *io = (obj); TString *x_ = (x); \
          val_(io).gc = obj2gco(x_); settt_(io, ctb(x_->tt)); \
          checkliveness(L,io); }

      #define setsvalue2s(L,o,s)    setsvalue(L,s2v(o),s) /* set a string to the stack */
      #define setsvalue2n    setsvalue /* set a string to a new object */

      typedef struct TString {
        CommonHeader;
        lu_byte extra;  /* 1: reserved words for short strings; 2: "has hash" for longs */
        lu_byte shrlen;  /* length for short strings */
        unsigned int hash;
        union {
          size_t lnglen;  /* length for long strings */
          struct TString *hnext;  /* linked list for hash table */
        } u;
        char contents[1];
      } TString;

      typedef struct stringtable {
          TString **hash;
          int nuse;  /* number of elements */
          int size;
      } stringtable;

      lstring.c:

        tablerehash: rehash current table, shrink or augment, with some repeatition.

        +------------------+----------------+----------------+
        |                  |     short      |     long       |
        +------------------+----------------+----------------+
        |     length       |     <= 40      |     > 40       | /* LUAI_MAXSHORTLEN = 40 defined in llimits.h */
        +------------------+----------------+----------------+
        |  lie in G->strt  |      YES       |      NO        | /* MINSTRTABSIZE = 128 defined in llimits.h */
        +------------------+----------------+----------------+
        |lie in G->strcache|      YES       |     YES        | /* TString *strcache[STRCACHE_N][STRCACHE_M], N=53,M=2 defined in llimits.h */
        +------------------+----------------+----------------+
        |     hashed       |      YES       |      NO        | /* luaS_hashlongstr explicitly hash longstr, set extra = 1 */
        +------------------+----------------+----------------+
        | c_str compatible |      YES       |     YES        | /* createstrobj create a new string, ending with '\0' */
        +------------------+----------------+----------------+
        |                  |                |                |
        +------------------+----------------+----------------+
        |                  |                |                |
        +------------------+----------------+----------------+

  Section 5: Table: array and hash

    typedef union Node {
      struct NodeKey {
        TValuefields;    /* fields for value */
        lu_byte key_tt;  /* key type */
        int next;        /* for chaining */
        Value key_val;   /* key value */
      } u;
      TValue i_val;      /* direct access to node's value as a proper 'TValue' */
    } Node;

    typedef struct Table {
      CommonHeader;
      lu_byte flags;             /* 1<<p means tagmethod(p) is not present */
      lu_byte lsizenode;         /* log2 of size of 'node' array */
      unsigned int alimit;       /* "limit" of 'array' array */
      TValue *array;             /* array part */
      Node *node;
      Node *lastfree;            /* any free position is before this position */
      struct Table *metatable;
      GCObject *gclist;
    } Table;

10) memory model: lmem.c lmem.c -> [[freeobj]] <- lgc.c lgc.h

    G->frealloc: free and alloc function, indepdent implementation, now l_alloc.

    G->GCdebt: number of malloc, debt of gc.




20) lapi.c lapi.h: api for c/c++

    macro LUA_API(luaconf.h) for describing functions used by outer modules.

    macro LUAI_FUNC for describing functions used by internal modules, but not external modules.

    macro LUAI_DDEC paly the same role on data as LUAI_FUNC.

    macro LUAI_DDEF play the same role as LUAI_DDEC, but for defining.

40) llex.h llex.c lparser.h lparser.c

    luaX_init: register keyword as reserved string

    luaX_next, luaX_lookahead: llex() -> { int token; Seminfo info; }

    typedef union { /* semantics information */
        lua_Number  r;
        lua_Integer i;
        TString   *ts;
    } SemInfo;

    void expr (LexState *ls, expdesc *v);
    void statement (LexState *ls);
    void block (LexState *ls);

    Statement:
      ifstat -> IF cond THEN block {ELSEIF cond THEN block} [ELSE block] END

49) GC: lgc.c lgc.h

      luaC_newobj: create GC object, used by string, table, function.

      luaC_fix: chang G->allgc to link G->fixedgc for forbidding gc.



50) lstate.h: global_State, lua_State

    G->frealloc, G->ud registered by lua_setallocf.
    G->warnf, G->ud_warn registered by lua_setwarnf.
    G->panic registered by lua_atpanic, changed by lua_atpanic.

100) virtual machine: lopnames.h lopcodes.h lopcodes.c lvm.h lvm.c

    typedef union StackValue {
        TValue val;
        struct {
            TValuefields;
            unsigned short delta;
        } tbclist;
    } StackValue;


    typedef StackValue *StkId;

        1: Index to stack elements.

        2: Lua stack is an array of StackValue, so it can be used by pointer StkId.

        3: Everything is in function, everything is object.
           Local variables lie in functions(located by offset), global variables lie in _Env object(located by name matching).


    #define LUA_MINSTACK 20
    #define BASIC_STACK_SIZE (2*LUA_MINSTACK)
    #define EXTRA_STACK  5
    #define LUAI_MAXSTACK 15000/1000000

    #define s2v(o) (&(o)->val) /* convert a 'StackValue' to a 'TValue' */

    #define api_incr_top(L)   {L->top++; api_check(L, L->top <= L->ci->top, "stack overflow");}

    Stack:

        +---+---+---+---+---+......+---+---+---+---+---+
        |   BASIC_STACK_SIZE       |    EXTRA_STACK    |
        +--------------------------+-------------------+
        ^                          ^
        |                          |
        L->stack,                  L->stack_last

        0: L->top is top frame, L->ci->top is top stack of current frame.

        1: stack_init: init thread basestack L->base_ci.

        2: freestack: luaE_freeCI(NOTE: skip current function), luaM_freearray(L->stack).
                      luaE_extendCI: init new CallInfo
                      CallInfo {
                          StkId func; /* function index in the stack, base pointer */
                          StkId top;  /* top for this function */

                          struct CallInfo *previous, *next;  /* dynamic call link */

                          short nresults;  /* expected number of results from this function */
                          unsigned short callstatus;
                      }

        3: lua_checkstack(L, n) check if has n another space, otherwise allocate by luaD_growstack.


999) running process: lua, luac, lapi[luaL_newstate, luaL_openlibs, luaL_dofile, lua_pcall, lua_close]

        int lua_load (lua_State *L, lua_Reader reader, void *dt, const char *chunkname, const char *mode);

        int luaD_protectedparser (lua_State *L, ZIO *z, const char *name, const char *mode);

        LClosure* luaY_parser (lua_State *L, ZIO *z, Mbuffer *buff, Dyndata *dyd, const char *name, int firstchar)
        {
          LexState lexstate;
          FuncState funcstate;

          LClosure *cl = luaF_newLclosure(L, 1);  /* create main closure */
          setclLvalue2s(L, L->top, cl);           /* anchor it (to avoid being collected) */
          luaD_inctop(L);

          lexstate.h = luaH_new(L);            /* create table for scanner */
          sethvalue2s(L, L->top, lexstate.h);  /* anchor it */
          luaD_inctop(L);

          funcstate.f = cl->p = luaF_newproto(L);
          luaC_objbarrier(L, cl, cl->p);
          funcstate.f->source = luaS_new(L, name);  /* create and anchor TString */
          luaC_objbarrier(L, funcstate.f, funcstate.f->source);
          lexstate.buff = buff;
          lexstate.dyd = dyd;
          dyd->actvar.n = dyd->gt.n = dyd->label.n = 0;
          luaX_setinput(L, &lexstate, z, funcstate.f->source, firstchar);
          mainfunc(&lexstate, &funcstate);
          lua_assert(!funcstate.prev && funcstate.nups == 1 && !lexstate.fs);
          /* all scopes should be correctly finished */
          lua_assert(dyd->actvar.n == 0 && dyd->gt.n == 0 && dyd->label.n == 0);
          L->top--;  /* remove scanner's table */
          return cl;  /* closure is on the stack, too */
        }

